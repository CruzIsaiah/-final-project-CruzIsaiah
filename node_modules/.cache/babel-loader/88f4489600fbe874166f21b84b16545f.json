{"ast":null,"code":"var _jsxFileName = \"/Users/zay/web102_unit7lab/client/src/pages/ViewPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { supabase } from \"../config/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewPost = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [upvotes, setUpvotes] = useState(0);\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState([]); // Fetch post data and upvotes count based on ID from Supabase\n\n  useEffect(() => {\n    const fetchPostData = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from(\"posts\").select(\"*\").eq(\"id\", id).single();\n\n        if (error) {\n          console.error(\"Error fetching post data:\", error);\n        } else {\n          setPost(data);\n          setUpvotes(data.upvotes); // Set upvotes count from database\n        }\n      } catch (error) {\n        console.error(\"Error fetching post data:\", error);\n      }\n    };\n\n    fetchPostData();\n  }, [id]); // Run effect whenever the ID parameter changes\n  // Fetch comments associated with the post from Supabase\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from(\"comments\").select(\"*\").eq(\"post_id\", id).order(\"timestamp\", {\n          ascending: true\n        });\n\n        if (error) {\n          console.error(\"Error fetching comments:\", error);\n        } else {\n          setComments(data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    };\n\n    fetchComments();\n  }, [id]);\n\n  const handleCommentSubmit = async event => {\n    event.preventDefault();\n    if (!comment.trim()) return;\n\n    try {\n      // Add comment to Supabase under the specific post\n      const {\n        error\n      } = await supabase.from(\"comments\").insert([{\n        post_id: id,\n        comment: comment,\n        timestamp: new Date()\n      }]);\n\n      if (error) {\n        console.error(\"Error adding comment:\", error);\n      } else {\n        // Clear comment input after successful submission\n        setComment(\"\"); // Fetch the newly added comment and update the comments state\n\n        const {\n          data: newCommentData,\n          error: newCommentError\n        } = await supabase.from(\"comments\").select(\"*\").eq(\"post_id\", id).order(\"timestamp\", {\n          ascending: true\n        });\n\n        if (newCommentError) {\n          console.error(\"Error fetching new comment:\", newCommentError);\n        } else {\n          if (newCommentData && newCommentData.length > 0) {\n            const newComment = newCommentData[newCommentData.length - 1]; // Get the last comment (latest one)\n\n            setComments(prevComments => [...prevComments, newComment]); // Update comments state with the new comment\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error adding comment:\", error);\n    }\n  };\n\n  const updateUpvotes = async () => {\n    try {\n      // Update upvotes count in Supabase\n      const {\n        error\n      } = await supabase.from(\"posts\").update({\n        upvotes: upvotes + 1\n      }).eq(\"id\", id);\n\n      if (error) {\n        console.error(\"Error updating upvotes count:\", error);\n      } else {\n        // Update the upvotes count in the UI\n        setUpvotes(count => count + 1);\n      }\n    } catch (error) {\n      console.error(\"Error updating upvotes count:\", error); // Handle error, e.g., display error message to the user\n    }\n  };\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"CommentCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"description\",\n      children: post.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttonContainer\",\n      style: {\n        textAlign: \"left\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"upvoteButton\",\n        onClick: updateUpvotes,\n        children: [\"Like: \", upvotes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleCommentSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"3\",\n          value: comment,\n          onChange: e => setComment(e.target.value),\n          placeholder: \"Add a comment...\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"commentsList\",\n        children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment\",\n          style: {\n            borderTop: \"1px solid white\",\n            borderBottom: \"1px solid white\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: comment.comment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: new Date(comment.timestamp).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this)]\n        }, comment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewPost, \"F62fqBS5NPPDD4rkNG2rjGf5/Lc=\", false, function () {\n  return [useParams];\n});\n\n_c = ViewPost;\nexport default ViewPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewPost\");","map":{"version":3,"names":["React","useState","useEffect","useParams","supabase","ViewPost","id","post","setPost","upvotes","setUpvotes","comment","setComment","comments","setComments","fetchPostData","data","error","from","select","eq","single","console","fetchComments","order","ascending","handleCommentSubmit","event","preventDefault","trim","insert","post_id","timestamp","Date","newCommentData","newCommentError","length","newComment","prevComments","updateUpvotes","update","count","title","body","textAlign","e","target","value","map","borderTop","borderBottom","toLocaleString"],"sources":["/Users/zay/web102_unit7lab/client/src/pages/ViewPost.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { supabase } from \"../config/client\";\n\nconst ViewPost = () => {\n  const { id } = useParams();\n  const [post, setPost] = useState(null);\n  const [upvotes, setUpvotes] = useState(0);\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState([]);\n\n  // Fetch post data and upvotes count based on ID from Supabase\n  useEffect(() => {\n    const fetchPostData = async () => {\n      try {\n        const { data, error } = await supabase\n          .from(\"posts\")\n          .select(\"*\")\n          .eq(\"id\", id)\n          .single();\n        if (error) {\n          console.error(\"Error fetching post data:\", error);\n        } else {\n          setPost(data);\n          setUpvotes(data.upvotes); // Set upvotes count from database\n        }\n      } catch (error) {\n        console.error(\"Error fetching post data:\", error);\n      }\n    };\n\n    fetchPostData();\n  }, [id]); // Run effect whenever the ID parameter changes\n\n  // Fetch comments associated with the post from Supabase\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const { data, error } = await supabase\n          .from(\"comments\")\n          .select(\"*\")\n          .eq(\"post_id\", id)\n          .order(\"timestamp\", { ascending: true });\n        if (error) {\n          console.error(\"Error fetching comments:\", error);\n        } else {\n          setComments(data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    };\n\n    fetchComments();\n  }, [id]);\n\n  const handleCommentSubmit = async (event) => {\n    event.preventDefault();\n    if (!comment.trim()) return;\n  \n    try {\n      // Add comment to Supabase under the specific post\n      const { error } = await supabase.from(\"comments\").insert([\n        { post_id: id, comment: comment, timestamp: new Date() },\n      ]);\n      if (error) {\n        console.error(\"Error adding comment:\", error);\n      } else {\n        // Clear comment input after successful submission\n        setComment(\"\");\n  \n        // Fetch the newly added comment and update the comments state\n        const { data: newCommentData, error: newCommentError } = await supabase\n          .from(\"comments\")\n          .select(\"*\")\n          .eq(\"post_id\", id)\n          .order(\"timestamp\", { ascending: true });\n        if (newCommentError) {\n          console.error(\"Error fetching new comment:\", newCommentError);\n        } else {\n          if (newCommentData && newCommentData.length > 0) {\n            const newComment = newCommentData[newCommentData.length - 1]; // Get the last comment (latest one)\n            setComments((prevComments) => [...prevComments, newComment]); // Update comments state with the new comment\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error adding comment:\", error);\n    }\n  };\n  \n  \n  \n  \n  const updateUpvotes = async () => {\n    try {\n      // Update upvotes count in Supabase\n      const { error } = await supabase\n        .from(\"posts\")\n        .update({ upvotes: upvotes + 1 })\n        .eq(\"id\", id);\n      if (error) {\n        console.error(\"Error updating upvotes count:\", error);\n      } else {\n        // Update the upvotes count in the UI\n        setUpvotes((count) => count + 1);\n      }\n    } catch (error) {\n      console.error(\"Error updating upvotes count:\", error);\n      // Handle error, e.g., display error message to the user\n    }\n  };\n\n  if (!post) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"CommentCard\">\n      <h2 className=\"title\">{post.title}</h2>\n      <p className=\"description\">{post.body}</p>\n      <div className=\"buttonContainer\" style={{ textAlign: \"left\" }}>\n        {/* Align buttons to the left */}\n        <button className=\"upvoteButton\" onClick={updateUpvotes}>\n          Like: {upvotes}\n        </button>\n      </div>\n\n      {/* Comment section */}\n      <div className=\"commentSection\">\n        <h3>Comments</h3>\n        <form onSubmit={handleCommentSubmit}>\n          <textarea\n            rows=\"3\"\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n            placeholder=\"Add a comment...\"\n            required\n          ></textarea>\n          <button type=\"submit\">Submit</button>\n        </form>\n        <div className=\"commentsList\">\n          {comments.map((comment) => (\n            <div key={comment.id} className=\"comment\" style={{ borderTop: \"1px solid white\", borderBottom: \"1px solid white\" }}>\n              <p>{comment.comment}</p>\n              <p>{new Date(comment.timestamp).toLocaleString()}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewPost;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}